[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Robin Penfold",
    "section": "",
    "text": "Code that I often use but rarely recall\n\n\n\n\n\nHere’s the post on this site that I view the most … and one that I hope will help you. It contains the code snippets that I often use but rarely recall. \n\n\n\n\n\nJul 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nProjecting portfolio risk\n\n\n\n\n\nRisk analysis is a standard technique within quantitative investment. In this post, I’ll describe how to perform it succinctly in R.\n\n\n\n\n\nMay 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nWinning at Wordle\n\n\n\n\n\nWordle is a source of healthy competition in our family. So, with a long train journey ahead of me, I thought I would embrace my nerd power and gain a competitive edge over my wife! I downloaded the most common five-letter words from the internet and analysed them with the following code. This leads me to suggest — only in the context of Wordle — that you should STARE at the CHILD that is FUNKY. \n\n\n\n\n\nDec 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nPremPredict\n\n\n\n\n\nThey think it’s all over. It is now.\n\n\n\n\n\nSep 19, 2020\n\n\n\n\n\n\n\n\n\n\n\n\nAsset manager evaluation\n\n\n\n\n\nBack in the day, I wrote research papers about investment practice. One example concerned how asset owners could better evaluate the investment performance of their asset managers. Basically, the idea is to view performance in the way that a Bayesian would. \n\n\n\n\n\nOct 20, 2016\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/evaluation/index.html",
    "href": "posts/evaluation/index.html",
    "title": "Asset manager evaluation",
    "section": "",
    "text": "The idea is pretty simple, which I’ll outline below. (I can do so, as the materials are already in the public domain.)\nIf you want the details, check out the formal paper at SSRN. For a more accessible introduction, I’d recommend the video below that was taken (and won an award) at the International Congress of Actuaries in 2014.\n\n\n\nThe gist of the idea\nIn short, a key mantra of investment advisors is that asset owners should ignore the performance of their asset manager. Whether the manager has outperformed for you or not, it is claimed, is irrelevant to how you should expect them to perform in the future. However, a key idea in statistics, called Bayesian thinking, suggests the opposite: that you should use any new information you get about something to update your thinking on it.\nIn this work, I therefore used Bayesian thinking to understand the advice that asset owners should get. It turns out that this advice makes common sense, particularly when paired with an understanding of whether the asset manager has some longer-term cyclicality in their performance.\nHere’s that video that I mentioned:"
  },
  {
    "objectID": "posts/portfolioRisk/index.html",
    "href": "posts/portfolioRisk/index.html",
    "title": "Projecting portfolio risk",
    "section": "",
    "text": "To do so, I’ll deliberately pick a minimal example and assume that our portfolio has the thirty-stock Dow-Jones Industrial Average (DJIA) as its index.\nI’ll show the results in a couple of paragraphs. Before that, let’s consider a little of the theory behind this analysis. Specifically, that the active variance of a portfolio relative to its index is: \\[\\omega^2 = X^T V X\\]\n, where:\nGiven this equation, I see that I need to begin the analysis by downloading the holdings of the index and the pricing data for the constituent stocks.\nlibrary(reactable)\nlibrary(tidyquant)\nlibrary(tidyverse)\nlibrary(tsibble)\nlibrary(waldo)\n\n# weights_index &lt;- tq_index(\"DOW\")\n# write_rds(x = weights_index, file = \"weights_index.rds\")\n\n# stock_prices  &lt;- tq_get(\n#   x = weights_index |&gt; pull(symbol), \n#   get = \"stock.prices\", \n#   from = \"2022-01-01\")\n# write_rds(x = stock_prices, file = \"stock_prices.rds\", compress = \"xz\")"
  },
  {
    "objectID": "posts/portfolioRisk/index.html#footnotes",
    "href": "posts/portfolioRisk/index.html#footnotes",
    "title": "Projecting portfolio risk",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor the sake of simplicity, I only consider split-adjusted price returns rather than the equivalent total returns in this example↩︎\nThis might be a heroic assumption, as it implies an independence between the risks experienced in different months↩︎\nNote that the sum of these values will add to the total active variance, as this calculation is essentially vector multiplication.↩︎"
  },
  {
    "objectID": "posts/snippets/index.html",
    "href": "posts/snippets/index.html",
    "title": "Code that I often use but rarely recall",
    "section": "",
    "text": "Specifically, these snippets enable me to:\n\nCustomise quarto output\nGenerate ggplot2 charts in the style that I use\nFormat tables in my preferred way\nAccess databases inside and outside of shiny\nSolve common niggles in package building\n\nTo demonstrate these code snippets, I’ll use the tidyverse packages with data from palmerpenguins.\n\nsuppressPackageStartupMessages(library(tidyverse))\nlibrary(palmerpenguins)\n\nNote: In each case below, you can copy the code by hovering over it and selecting the clipboard icon in the top-right of the code chunk.\n\n\n1. Customise quarto output\nGiven my frequent use of Quarto notebooks, I’ve gravitated to these settings that work best for me.\nHowever, you can easily tweak these settings to suit you, as each option has an accompanying ‘tab auto-complete’ feature.\n---\ntitle: \"Add title here\"\nsubtitle: \"Add subtitle here\"\nauthor:\n  - Robin Penfold \ndate: today\nformat: \n  html:\n    anchor-sections: true \n    code-copy: hover \n    code-fold: true \n    code-link: true \n    code-overflow: wrap \n    code-summary: \"&lt;/&gt;\" \n    code-tools: false \n    df-print: paged \n    embed-resources: true \n    float: true\n    footnotes-hover: true \n    highlight-style: pygments\n    lang: en-GB \n    linkcolor: \"#63431c\"\n    mainfont: \"Arial\"\n    table-of-contents: true \n    toc-depth: 4\n    toc-title: \" \"\n    title-block-banner: \"#edd9c0\"\n    title-block-banner-color: \"#63431c\"\n    title-block-categories: false\neditor_options:\n  chunk_output_type: inline\n---\n\n\n\n2. Generate ggplot2 charts in the style that I use\nOver time, I have coalesced towards the following small chunk of code that builds (what I consider to be) a decent-looking chart in ggplot2.\n\npenguins |&gt; \n  ggplot(\n    aes(\n      x = bill_length_mm,\n      y = body_mass_g\n      )\n    ) + \n  geom_point() +\n  geom_smooth(\n    method = \"lm\", \n    se = FALSE, \n    colour = \"#63431c\"\n    ) +\n  labs(\n    title = \"Penguins with longer bills tend to be heavier\\n\",\n    subtitle = \"Body mass (g)\",\n    x = \"\\nBill length (mm)\",\n    y = NULL\n    ) +\n  scale_y_continuous(labels = scales::label_comma()) +\n  theme_minimal() +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(size = 14, colour = \"#63431c\"),\n    axis.title.x = element_text(hjust = 1)\n    )\n\n\n\n\n\n\n\n\n\n\n\n3. Format tables in my preferred way\nI occasionally print tables using the out-of-the-box settings (admittedly tweaked by using the df-print: paged option in part 1 above). This generates a table as follows.\n\npenguins\n\n\n  \n\n\n\nOtherwise, I usually use reactable with the following tweaks.\n\nlibrary(reactable)\n\npenguins |&gt; \n  select(species, island, bill_length_mm, bill_depth_mm, body_mass_g) |&gt; \n  reactable(\n    filterable = TRUE, \n    highlight = TRUE, \n    borderless = TRUE, \n    defaultPageSize = 5, \n    columns = list(\n      species = colDef(name = \"Species\", minWidth = 90, sticky = \"left\"),\n      island = colDef(name = \"Island\", minWidth = 90, sticky = \"left\"),\n      bill_length_mm = colDef(name = \"Bill length\", sticky = \"right\", filterable = FALSE, format = colFormat(separators = TRUE, digits = 1)),\n      bill_depth_mm = colDef(name = \"Bill depth\", sticky = \"right\", filterable = FALSE, format = colFormat(separators = TRUE, digits = 1)),\n      body_mass_g = colDef(name = \"Body mass\", sticky = \"right\", filterable = FALSE, format = colFormat(separators = TRUE, digits = 0))\n      )\n    )\n\n\n\n\n\nFor completeness, I occasionally also use DT (i.e. the datatable package).\nlibrary(DT)\n\npenguins |&gt; \n  select(\"Species\" = species, \"Island\" = island, \"Bill length\" = bill_length_mm, \"Bill depth\" = bill_depth_mm, \"Body mass\" = body_mass_g) |&gt; \n  datatable(\n    rownames = FALSE, \n    width = \"100%\",\n    options=list(\n      dom = 'tip',\n      pageLength = 5\n      )\n    ) |&gt; \n  formatRound(\n    columns = 3:4,\n    digits = 1\n    ) |&gt; \n  formatRound(\n    columns = 5,\n    digits = 0\n    )\n\n\n\n\n\n4. Access databases inside and outside of shiny\nI use the wonderful DBI and dbplyr all the time, not least for exploratory analysis.\n(Note that whilst I typically don’t use SQLite, I will do so here, as it plays better with my website architecture.)\n\nlibrary(RSQLite)\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \":memory:\")\n\ndbWriteTable(con, \"instruments\", dplyr::band_instruments)\ndbWriteTable(con, \"members\", dplyr::band_members)\n\ndbListTables(con)\n\n[1] \"instruments\" \"members\"    \n\n\nIn this example, we create an object (con) for connecting to the SQLite database, where we add two tiny tables, called instruments and members. We can then explore these tables.\n\ntbl(src = con, \"instruments\")\n\n\n  \n\n\n\n\ntbl(src = con, \"members\")\n\n\n  \n\n\n\nEven better, we can explore the tables when they are combined and tidied. (Whilst the code appears to return all the data, that’s only because our tables are uncommonly small.)\n\ntbl(src = con, \"instruments\") |&gt; \n  left_join(\n    tbl(src = con, \"members\"), \n    by = \"name\"\n  ) |&gt; \n  filter(band == \"Beatles\")\n\n\n  \n\n\n\nOnce you have what you need, assign a name to the code and append it with |&gt; collect().\n\nWhilst this functionality is great outside of shiny, it is often more valuable within it. (After all, these apps can be a really safe and simple way for users to access a corporate database.)\nTo do so, some other tweaks are required within shiny’s server functionality, as illustrated below.\n\ndata_chosen &lt;- shiny::reactive({\n  shiny::req(input$dataset)\n  main_data |&gt; \n    dplyr::filter(name_dataset == input$dataset) |&gt; \n    dplyr::mutate(id = as.integer(id))\n  })\n\ndata_chosen_id &lt;- shiny::reactive(\n  quote({data_chosen()$id}),\n  quoted = TRUE\n  )\n\ndata_calculated &lt;- shiny::reactive({\n  arbitrary_function(\n    con,\n    arbitrary_argument = data_chosen_id()\n    )\n  })\n\n\n\n\n5. Solve common niggles in package building\nWhen I’m building packages, I often get dinged with notes or warnings about two common package niggles.\nThe first of these is non-ASCII characters. With apologies for the person who showed me, and who I now can’t recall, you can find these characters by:\n\nClicking CTRL + F in RStudio\nSelecting the Regex tick-box\nEntering: [\\u0080-\\uFFFF] or [^\\x00-\\x7F] as the search term\n\nFrom there, you can use stringi::stri_escape_unicode('@') to get the Unicode equivalent for @. (Note that you also might need to remove the initial ‘\\’ on Windows.)\n\nThe second niggle of package building concerns variable binding. It occurs during the package check and creates a note along the following lines.\nno visible binding for global variable\n    ‘ABC’\nIn this case, we need to do something of the form below (from my simple package p0bservations that you can find here).\n\n#' @title Calculate income net of UK tax and National Insurance\n#'\n#' @description This function ...\n#' @param income_taxable The taxable income level ...\n#' @param tax_year_end The calendar year in which the tax year ends ...\n#' @export\n#' @examples\n#' \\dontrun{\n#' calc_income_net(income_taxable = 38000, tax_year_end = 2022L)\n#' }\n#' \n#' @importFrom rlang .data\n\nOnce we have added the line of #' @importFrom rlang .data, we can call the variables as follows (i.e. as before, but preceded by .data$).\n\nyear_tax_end_options &lt;- p0bservations::tax_parameters |&gt; \n  dplyr::distinct(.data$year_tax_end) |&gt; \n  dplyr::pull(.data$year_tax_end)\n\n\nOnce again, I hope that this aide-mémoire helps you as well as me!"
  },
  {
    "objectID": "posts/wordle/index.html",
    "href": "posts/wordle/index.html",
    "title": "Winning at Wordle",
    "section": "",
    "text": "Let’s start by getting the ~500 most commonly-occurring five-letter words (that I downloaded as a csv file from the internet).\n\nsuppressPackageStartupMessages(library(tidyverse))\n\nwords &lt;- \n  read_csv(\n    file = \"five-letters.csv\", \n    col_names = FALSE\n    ) |&gt; \n  rename(\"word\" = X1) |&gt; \n  mutate(word = str_to_lower(word)) |&gt; \n  mutate(\n    l1 = str_sub(string = word, start = 1, end = 1),\n    l2 = str_sub(string = word, start = 2, end = 2),\n    l3 = str_sub(string = word, start = 3, end = 3),\n    l4 = str_sub(string = word, start = 4, end = 4),\n    l5 = str_sub(string = word, start = 5, end = 5)\n  )\n\nwords\n\n\n  \n\n\n\nFor reference, I’ll also chart the popularity of each letter by their order in these five-letter words.\n\nwords_long &lt;- words |&gt; \n  pivot_longer(\n    cols = -word, \n    names_to = \"measure\", \n    values_to = \"values\"\n    ) |&gt; \n  mutate(\n    position = as.integer(\n      str_sub(string = measure, start = 2)\n      )\n    ) |&gt; \n  select(values, position)\n\nwords_long |&gt; \n  count(values, position) |&gt; \n  mutate(\n    position = case_match(\n      position,\n      1 ~ \"1st\",\n      2 ~ \"2nd\",\n      3 ~ \"3rd\",\n      4 ~ \"4th\",\n      5 ~ \"5th\"\n      )\n    ) |&gt; \n  ggplot(\n    aes(\n      x = values, \n      y = n, \n      fill = values %in% c(\"a\", \"e\", \"r\", \"s\", \"t\")\n      )\n    ) + \n  geom_col() + \n  scale_y_continuous(\n    limits = c(0, NA), \n    minor_breaks = NULL, \n    expand = expansion(mult = 0, add = 1)\n    ) + \n  scale_fill_manual(values = c(\"#edd9c0\", \"#63431c\")) +\n  facet_wrap(~position, nrow = 1) + \n  theme_minimal() + \n  labs(\n    title = \"Frequency of letter by word order\",\n    subtitle = \"Emphasis on the letters a, e, r, s and t\\n\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"plot\"\n    )\n\n\n\n\n\n\n\n\nAs you can see from the emphasis, some of these letters appear a lot more than others, and especially at the start and end of the word."
  },
  {
    "objectID": "posts/wordle/index.html#footnotes",
    "href": "posts/wordle/index.html#footnotes",
    "title": "Winning at Wordle",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThese ‘best’ guesses might not be perfect, as my assumptions above and the approach in general could probably be improved, perhaps with Operational Research techniques. That said, I suspect that ‘stare’ and the next guesses are decent approximations to the ideal solution.↩︎"
  },
  {
    "objectID": "posts/prempredict/index.html",
    "href": "posts/prempredict/index.html",
    "title": "PremPredict",
    "section": "",
    "text": "After a good run of thirteen years, now feels like the right time to end our PremPredict competition.\nThanks to all of you who have shared in the fun over this time. I’m pleased to say that this included Les Penfold, Mike Finnis and Roger Gathercole.\nAs you’ll see below, though, this post and the Wall of Fame will remain here, always showing that Peter Finnis was left holding the crown!\n(Oh yeah – and always showing how some of the biggest football nerds remained winless.)\n\n\n\nPremPredict champions\n\n2007/08 – Robert Wye\n2008/09 – Les Penfold\n2009/10 – Beth Penfold\n2010/11 – George Quin and Miranda Stride\n2011/12 – Hannah Finnis\n2012/13 – Michael Cheeseman\n2013/14 – Danny Russell\n2014/15 – Mathew Saunders\n2015/16 – Roger Gathercole\n2016/17 – Luke Finnis\n2017/18 – George Quin\n2018/19 – Roger Gathercole\n2019/20 – Peter Finnis\n\n\nThanks again for all the fun!"
  }
]