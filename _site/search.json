[
  {
    "objectID": "posts/brexit/index.html",
    "href": "posts/brexit/index.html",
    "title": "Brexit vote analysis",
    "section": "",
    "text": "You can scroll down for an interactive chart of each constituency, but the following chart shows the main detail.\n\n\nCode\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(ggiraph)\nlibrary(glue)\nlibrary(ggplot2)\nlibrary(ggtext)\nlibrary(parlitools)\nlibrary(scales)\n\nmap_details <- west_hex_map\nsf::st_crs(map_details) = 4326\n\ndata_brexit <- leave_votes_west |>  \n  rename(`Leave Vote` = figure_to_use) |> \n  mutate(\n    `Party of MP` = as_factor(party_2016), \n    `Party of MP` = \n      recode(\n        `Party of MP`,\n        `Scottish National Party` = \"SNP\", \n        `Liberal Democrat` = \"LibDem\"\n        ),\n    `Party of MP` = fct_lump(\n      `Party of MP`,\n      n = 5, \n      other_level = \"Other\"\n      )\n    ) |> \n  left_join(\n    map_details,\n    by = c(\"ons_const_id\" = \"gss_code\")\n    ) |> \n  mutate(\n    constituency = if_else(\n      is.na(constituency_name.x), \n      constituency_name.y, \n      constituency_name.x\n      ),\n    vote_status = case_when(\n      (`Leave Vote` >= 0) & (`Leave Vote` <= 0.4) ~ \"Remain\",\n      (`Leave Vote` > 0.4) & (`Leave Vote` <= 0.6) ~ \"Close Call\",\n      (`Leave Vote` > 0.6) & (`Leave Vote` <= 1) ~ \"Leave\",\n      TRUE ~ \"Error\"\n      ),\n    vote_status = as_factor(vote_status),\n    vote_status = fct_relevel(vote_status, sort)\n    ) |> \n  select(constituency, `Leave Vote`, `Party of MP`, ons_const_id, vote_status, geometry)\n\nhtml_text <- glue(\"<span>Showing constituencies with <span style='color:#0087DC;'>Conservative</span>, <span style='color:#DC241F;'>Labour</span>, <span style='color:#FFFF00;'>SNP</span>, <span style='color:#FDBB30;'>LibDem</span> and <span style='color:#AFAFAFAF;'>Other</span> MPs</span><br/>\")\n\ndata_brexit |> \n  ggplot() + \n  geom_sf(\n    aes(\n      group = constituency,\n      geometry = geometry,\n      fill = `Party of MP`\n      ),\n    size = 0.1\n    ) + \n  scale_fill_manual(\n    values = c(\n      Conservative = \"#0087DC\",\n      Labour = \"#DC241F\",\n      SNP = \"#FFFF00\",\n      LibDem = \"#FDBB30\",\n      Other = \"grey80\"\n      )\n    ) + \n  facet_grid(~vote_status, margins = TRUE, drop = TRUE) +\n  theme_void() + \n  labs(\n    title = \"Leave voters seem to have a bigger split in party allegiance\",\n    subtitle = html_text\n  ) + \n  theme(\n    plot.title.position = \"plot\",\n    plot.subtitle = element_markdown(),\n    legend.position = \"none\",\n    plot.background = element_rect(\n      fill = \"grey90\", \n      colour = \"grey90\", \n      linewidth = 1\n      ),\n    plot.margin = margin(0.5, 0.5, 0.5, 0.5, \"cm\")\n    )\n\n\n\n\n\nBasically, outside of Scotland, there seems to be a bigger split in Leaver constituencies than in their Remainer counterparts.\nTo get the details for each constituency, hover over the relevant spot in the chart below.\n\n\nCode\ngg <- data_brexit |> \n  ggplot() + \n  geom_sf_interactive(\n    aes(\n      group = constituency,\n      geometry = geometry,\n      fill = `Leave Vote`,\n      colour = `Party of MP`,\n      tooltip = paste0(\n        constituency, \n        \"\\n MP: \",\n        `Party of MP`,\n        \"\\n Leave vote: \",\n        round(`Leave Vote` * 100, 0),\n        \"%\"\n        )\n    ),\n    size = 0.1\n  ) + \n  scale_fill_gradient_interactive(\n    low = \"white\", \n    high = \"#63666a\",\n    labels = percent_format(accuracy = 1)\n    ) +\n  scale_colour_manual_interactive(\n    values = c(\n      Conservative = \"#0087DC\",\n      Labour = \"#DC241F\",\n      SNP = \"#FFFF00\",\n      LibDem = \"#FDBB30\",\n      Other = \"grey80\"\n      )\n    ) + \n  theme_void() +\n  labs(\n    title = \"Leave vote and winning party, by constituency\", \n    subtitle = \"Hover over a point for the details\"\n  ) + \n  theme(\n    legend.position = \"right\",\n    legend.text = element_text(size = 6, hjust = 0),\n    legend.title = element_text(size = 8)\n    )\n\ngirafe(ggobj = gg)"
  },
  {
    "objectID": "posts/batting/index.html",
    "href": "posts/batting/index.html",
    "title": "Who bats best?",
    "section": "",
    "text": "A couple of years ago, I downloaded the top 200 averages for each batting order from the wonderful stats engine at espnCricinfo, before:\n\nIgnoring averages from players with fewer than twenty innings\nConsidering only results against Australia, England, India, New Zealand, Pakistan, South Africa, Sri Lanka and the West Indies\n\nFor reference, here are the first six rows of the resulting data.\n\n\nCode\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(glue)\n  \nbatOrder <- read_csv(\"BattingOrder.csv\") |>  \n  mutate(\n    Name = word(Player, start = 1L, end = -2L),\n    fullCountry = word(Player, -1),\n    Country = str_sub(fullCountry, 2,-2)) %>% \n  filter(\n    Country %in% c(\"Aus\", \"Ban\", \"Eng\", \"India\", \"NZ\", \"Pak\", \"SA\", \"SL\", \"WI\")\n    ) |> \n  mutate(\n    Start = as.integer(str_sub(Span, 1, 4)),\n    Decade = 10*trunc(Start/10),\n    Name = str_replace_all(Name, \"'\", \" \") \n    ) |> \n  select(Name, Country, Start, Decade, Ave, Innings = Inns, Runs, Bat)\n\nglimpse(batOrder, width = 70)\n\n\nRows: 873\nColumns: 8\n$ Name    <chr> \"B Mitchell\", \"JB Hobbs\", \"RB Simpson\", \"L Hutton\", …\n$ Country <chr> \"SA\", \"Eng\", \"Aus\", \"Eng\", \"India\", \"Eng\", \"Eng\", \"S…\n$ Start   <int> 1931, 1908, 1961, 1938, 2002, 1924, 1986, 1996, 1948…\n$ Decade  <dbl> 1930, 1900, 1960, 1930, 2000, 1920, 1980, 1990, 1940…\n$ Ave     <dbl> 65.04, 58.14, 58.03, 57.74, 55.19, 54.38, 53.84, 52.…\n$ Innings <dbl> 26, 87, 28, 120, 21, 20, 21, 41, 23, 90, 105, 74, 35…\n$ Runs    <dbl> 1431, 4768, 1567, 6236, 1159, 979, 1023, 2002, 1106,…\n$ Bat     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n\n\n\nWe can then analyse the data by batting order, using the splendid gganimate.\n\n\nCode\nbatOrder |> \n  ggplot(\n    aes(\n      x = Decade,\n      y = Ave,\n      color = Country, \n      size = Innings\n      )\n    ) +\n  geom_point(alpha = 1) +\n  labs(\n    x = \"Last decade of the batsman's career\",\n    y = \"\"\n    ) +\n  ggtitle(\n    'The best players who have ever batted at {closest_state} in the order',\n    subtitle = 'Average when batting at that position'\n    ) + \n  transition_states(\n    states = Bat,\n    transition_length = 2,\n    state_length = 1\n    ) + \n  ease_aes('cubic-in-out')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Robin Penfold",
    "section": "",
    "text": "My Life In Months\n\n\n\n\n\nMany of us have recently had more time to reflect. One artifact of this reflection is My Life In Months: a chart that explains each month of your life. To me, it feels like the most meta personal dashboard available.\n\n\n\n\n\n\nSep 20, 2020\n\n\n\n\n\n\n  \n\n\n\n\nPremPredict\n\n\n\n\n\nThey think it’s all over. It is now.\n\n\n\n\n\n\nSep 19, 2020\n\n\n\n\n\n\n  \n\n\n\n\nAsset manager evaluation\n\n\n\n\n\nBack in the day, I wrote research papers about investment practice. One example concerned how asset owners could better evaluate the investment performance of their asset managers. Basically, the idea is to view performance in the way that a Bayesian would.\n\n\n\n\n\n\nOct 20, 2016\n\n\n\n\n\n\n  \n\n\n\n\nBrexit vote analysis\n\n\n\n\n\nI wanted more insight into the recent vote and so investigated each constituency, comparing the Brexit vote with that of the winning parliamentary party from 2016\n\n\n\n\n\n\nOct 12, 2016\n\n\n\n\n\n\n  \n\n\n\n\nWho bats best?\n\n\n\n\n\nCricket commentators often talk of changes in batting quality through the ages. Or they say that batting order matters to averages (or vice-versa). But is there anything in these questions?\n\n\n\n\n\n\nOct 9, 2016\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "At work – Leading my firm’s quant analysis of asset managers, using investment techniques and data science\nAs a volunteer – Helping charities to get more from their data with DataKind\nOtherwise – With my family and friends, and supporting sports teams that rarely win"
  },
  {
    "objectID": "posts/evaluation/index.html",
    "href": "posts/evaluation/index.html",
    "title": "Asset manager evaluation",
    "section": "",
    "text": "The idea is pretty simple, which I’ll outline below. (I can do so, as the materials are already in the public domain.)\nIf you want the details, check out the formal paper at SSRN. For a more accessible introduction, I’d recommend the video below that was taken (and won an award) at the International Congress of Actuaries in 2014.\n\n\n\nThe gist of the idea\nIn short, a key mantra of investment advisors is that asset owners should ignore the performance of their asset manager. Whether the manager has outperformed for you or not, it is claimed, is irrelevant to how you should expect them to perform in the future. However, a key idea in statistics, called Bayesian thinking, suggests the opposite: that you should use any new information you get about something to update your thinking on it.\nIn this work, I therefore used Bayesian thinking to understand the advice that asset owners should get. It turns out that this advice makes common sense, particularly when paired with an understanding of whether the asset manager has some longer-term cyclicality in their performance.\nHere’s that video that I mentioned:"
  },
  {
    "objectID": "posts/prempredict/index.html",
    "href": "posts/prempredict/index.html",
    "title": "PremPredict",
    "section": "",
    "text": "After a good run of thirteen years, now feels like the right time to end our PremPredict competition.\nThanks to all of you who have shared in the fun over this time. I’m pleased to say that this included Les Penfold, Mike Finnis and Roger Gathercole.\nAs you’ll see below, though, this post and the Wall of Fame will remain here, always showing that Peter Finnis was left holding the crown!\n(Oh yeah – and always showing how some of the biggest football nerds remained winless.)\n\n\n\nPremPredict champions\n\n2007/08 – Robert Wye\n2008/09 – Les Penfold\n2009/10 – Beth Penfold\n2010/11 – George Quin and Miranda Stride\n2011/12 – Hannah Finnis\n2012/13 – Michael Cheeseman\n2013/14 – Danny Russell\n2014/15 – Mathew Saunders\n2015/16 – Roger Gathercole\n2016/17 – Luke Finnis\n2017/18 – George Quin\n2018/19 – Roger Gathercole\n2019/20 – Peter Finnis\n\n\nThanks again for all the fun!"
  },
  {
    "objectID": "posts/mylifeinmonths/index.html",
    "href": "posts/mylifeinmonths/index.html",
    "title": "My Life In Months",
    "section": "",
    "text": "Code\n# devtools::install_github(\"hrbrmstr/waffle\")\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(lubridate)\nlibrary(ggtext)\nlibrary(RColorBrewer)\nlibrary(waffle)\n\n\n# Colours ----\n\nadd.alpha <- function(value_colour, value_alpha = 1){\n  apply(\n    sapply(value_colour, col2rgb)/255, \n    2, \n    function(x) \n      rgb(\n        x[1], x[2], x[3], \n        alpha = value_alpha\n        )\n    )  \n}\n\n# values_colour <- brewer.pal(n = 8, name = 'Accent')\nvalues_colour <- c(\"#FDC086\", \"#F0027F\", \"#7FC97F\", \"#FFFF99\", \"#386CB0\", \"#BEAED4\", \"#BF5B17\", \"#666666\")\nbackground_colour <- 'black'\n\n\n# Prep data ----\n\nbirth_year <- 1972\nfinal_year <- birth_year + 95\nbirth_month <- 1\ncurrent_year <- year(today())\ncurrent_month <- month(today())\n\n# csv downloaded from https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/lifeexpectancies/datasets/lifetablesprincipalprojectionunitedkingdom\nmortality_data <- read_csv(\n  \"mortality - Sheet1.csv\", \n  col_types = cols(`lx/l48` = col_number())\n)\n\nlife_expectancy <- mortality_data %>% \n  filter(\n    `lx/l48` < 50\n    ) %>% \n  slice(1) %>% \n  pull(`Age x`) - 1\n\nlife_25 <- mortality_data %>% \n  filter(\n    `lx/l48` < 25\n  ) %>% \n  slice(1) %>% \n  pull(`Age x`) - 1\n\nlife_75 <- mortality_data %>% \n  filter(\n    `lx/l48` < 75\n  ) %>% \n  slice(1) %>% \n  pull(`Age x`) - 1\n\nlife_data_basic <- expand_grid(\n  month = month.name,\n  year = birth_year:final_year\n) %>%\n  mutate(month = fct_relevel(month, month.name)) %>%\n  arrange(year, month) %>%\n  group_by(year) %>%\n  mutate(month_number = row_number()) %>%\n  ungroup() %>%\n  filter(!(year == birth_year & month_number < birth_month))\n\neras <- tibble(\n  year_month = c(\"1972,1\", \"1972,2\", \"1990,9\", \"1993,6\", \"1994,4\", \"2005,10\", \"2020,8\"),\n  era = c(\"Blank\", \"childhood\", \"university\", \"temp work\", \"Russell job\", \"Watsons role\", \"what might remain\"),\n  fill_colour = values_colour[c(8, 2:7)]\n  )\n\nlife_data <- life_data_basic %>%\n  rowwise() %>%\n  mutate(year_month = paste0(c(year, month_number), collapse = \",\")) %>%\n  ungroup() %>%\n  left_join(eras, by = \"year_month\") %>%\n  fill(era, fill_colour) %>%\n  mutate(fill_colour = fct_inorder(fill_colour)) %>% \n  left_join(mortality_data, by = c(\"year\" = \"Year\")) %>% \n  rowwise() %>% \n  mutate(\n    odds_survival = ifelse(year <= current_year, 1, `lx/l48`/100),\n    fill_colour_final = add.alpha(\n      value_colour = fill_colour, \n      value_alpha = odds_survival\n      )\n    ) %>% \n  ungroup() %>% \n  rownames_to_column(var = \"row_number\") %>% \n  group_by(fill_colour_final) %>% \n  mutate(row_number_max = max(row_number)) %>% \n  ungroup() %>% \n  mutate(fill_colour_final = as_factor(fill_colour_final)) %>% \n  select(month, year, row_number_max, era, fill_colour, odds_survival, fill_colour_final)\n\n# Base plot ----\n\nhtml_text <- glue(\n  \"<b  style = 'font-size:10pt; color:white;'>My life in months</b>\", \n  \"<br>\",\n  \"<span style = 'font-size:8pt; color:white;'>\",\n  \"Showing \",\n  \"<strong style='color:{eras$fill_colour[2]}'>{eras$era[2]}</strong> \",\n  \"<strong style='color:{eras$fill_colour[3]}'>{eras$era[3]}</strong> \",\n  \"<strong style='color:{eras$fill_colour[4]}'>{eras$era[4]}</strong> \",\n  \"<strong style='color:{eras$fill_colour[5]}'>{eras$era[5]}</strong> \",\n  \"<strong style='color:{eras$fill_colour[6]}'>{eras$era[6]}</strong> and \",\n  \"<strong style='color:{eras$fill_colour[7]}'>{eras$era[7]}</strong> for @p0bs\",\n  \"</span>\"\n)\n\nlife_in_months_base <- life_data %>%\n  count(fill_colour_final, sort = FALSE) %>% \n  ggplot(aes(fill = fill_colour_final, values = n)) +\n  geom_waffle(color = background_colour, n_rows = 12, linewidth = 1, flip = FALSE) + \n  coord_equal() + \n  geom_segment(aes(x = life_25 + 1, xend = life_25 + 1, y = -0, yend = 13), linetype = 3, size = 0.5, color = '#DDDDDD') +\n  geom_segment(aes(x = life_75 + 1, xend = life_75 + 1, y = -0, yend = 13), linetype = 3, size = 0.5, color = '#DDDDDD') +\n  geom_segment(aes(x = life_expectancy + 1, xend = life_expectancy + 1, y = -0, yend = 13), linetype = 3, size = 0.5, color = '#DDDDDD') +\n  scale_x_continuous(limits = c(-0.5, 97.5)) + \n  scale_y_continuous(limits = c(-4, 16)) +\n  scale_fill_identity() +\n  labs(y = NULL, x = NULL, title = html_text) + \n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"panel\",\n    plot.background = element_rect(fill = background_colour, color = background_colour),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    plot.title = element_textbox_simple(\n      fill = 'black', \n      padding = margin(5.5, 5.5, 5.5, 5.5),\n      margin = margin(5.5, 5.5, 5.5, 5.5), \n      box.colour = background_colour,\n      linetype = 1,\n      r = grid::unit(8, \"pt\")\n      )\n  )\n\n# Initial annotations ----\n\nannotation_base_size <- 3\nannotation_lineheight <- 1\ninitial_annotations_colour <- values_colour[1]\n\ninitial_text <- function(x, y, label, size = annotation_base_size, colour = initial_annotations_colour, ...) {\n  annotate(\"text\", x = x, y = y, label = label, size = size, colour = colour, ...)\n}\n\ninitial_segment <- function(x, xend, y, yend, colour = initial_annotations_colour) {\n  geom_segment(aes(x = x, xend = xend, y = y, yend = yend), colour = colour)\n}\n\nlife_in_months_initial_annotations <- life_in_months_base +\n  initial_text(x = 0, y = 6.5, label = \"1 year\", angle = 0, size = annotation_base_size * 0.8, hjust = 1) +\n  initial_segment(x = 0, xend = 0, y = 1, yend = 5) +\n  initial_segment(x = -0.25, xend = 0.25, y = 1, yend = 1) +\n  initial_segment(x = 0, xend = 0, y = 8, yend = 12) +\n  initial_segment(x = -0.25, xend = 0.25, y = 12, yend = 12) +\n  initial_text(x = 1, y = 14.5, label = \"1 square = 1 month\", size = annotation_base_size * 0.8, lineheight = annotation_lineheight, hjust = 0.4) +\n  geom_segment(aes(x = 5, xend = 5, y = 13.5, yend = 12), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) +\n  initial_text(x = 16, y = -2, label = \"Years\", size = annotation_base_size * 0.8, hjust = 0) +\n  geom_segment(aes(x = 20.5, xend = 22.5, y = -2.2, yend = -2.2), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) + \n  initial_text(x = 47.6, y = -2, label = \"2020\", size = annotation_base_size * 0.8, hjust = 0, lineheight = annotation_lineheight) +\n  geom_segment(aes(x = 49, xend = 49, y = -1.2, yend = 0.2), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) + \n  initial_text(x = 0, y = -2, label = \"Born (Feb 1972)\", size = annotation_base_size * 0.8, hjust = 0, lineheight = annotation_lineheight) +\n  geom_segment(aes(x = 1, xend = 1, y = -1.2, yend = 1.8), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) + \n  initial_text(x = 21.6, y = 14.5, label = \"Mr & Mrs\", size = annotation_base_size * 0.8, lineheight = annotation_lineheight, hjust = 0) +\n  geom_segment(aes(x = 25, xend = 25, y = 13.5, yend = 12), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) + \n  initial_text(x = 35.6, y = 14.5, label = \"Parenthood\", size = annotation_base_size * 0.8, lineheight = annotation_lineheight, hjust = 0) +\n  geom_segment(aes(x = 39, xend = 39, y = 13.5, yend = 8), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) +\n  initial_text(x = 29.4, y = 14.6, label = \"Seattle\", size = annotation_base_size * 0.8, lineheight = annotation_lineheight, hjust = 0) +\n  geom_segment(aes(x = 30, xend = 31, y = 13, yend = 13), colour = initial_annotations_colour) +\n  geom_segment(aes(x = 32, xend = 33, y = 13, yend = 13), colour = initial_annotations_colour) +\n  initial_segment(x = 30, xend = 30, y = 12.5, yend = 13.5, colour = initial_annotations_colour) +\n  initial_segment(x = 33, xend = 33, y = 12.5, yend = 13.5, colour = initial_annotations_colour) +  \n  initial_text(x = 79.5, y = 14.5, label = \"Will I still be alive?\", size = annotation_base_size * 0.8, lineheight = annotation_lineheight, hjust = 0) +\n  geom_segment(aes(x = 79, xend = 78, y = 14.1, yend = 14.1), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) + \n  geom_segment(aes(x = 93, xend = 94, y = 14.1, yend = 14.1), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) +\n  initial_text(x = life_25 -1, y = -2, label = \"1 in 4 chance\", size = annotation_base_size * 0.8, hjust = 0, lineheight = annotation_lineheight) +\n  geom_segment(aes(x = life_25 + 1, xend = life_25 + 1, y = -1.2, yend = 0.2), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) + \n  initial_text(x = life_expectancy - 4.5, y = -2, label = \"1 in 2 chance\", size = annotation_base_size * 0.8, hjust = 0, lineheight = annotation_lineheight) +\n  geom_segment(aes(x = life_expectancy + 1, xend = life_expectancy + 1, y = -1.2, yend = 0.2), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour) + \n  initial_text(x = life_75 -5.9, y = -2, label = \"3 in 4 chance\", size = annotation_base_size * 0.8, hjust = 0, lineheight = annotation_lineheight) +\n  geom_segment(aes(x = life_75 + 1, xend = life_75 + 1, y = -1.2, yend = 0.2), arrow = arrow(length = unit(0.0175, \"npc\")), colour = initial_annotations_colour)\n\nlife_in_months_initial_annotations\n\n\n\n\n\nYou can see my version of the chart above.\nThis work is inspired by (and benefits from) similar analysis by Sharla Gelfand and Isabella Benabaye. As Isabella says, this type of chart can really provide perspective.\nThat said, the amount of available months in these previous charts seems almost endless. As this is sadly not going to be the case, I also reflect the likelihood of my demise, by making the ‘what might remain’ colour fade over time at a given rate, corresponding with my likelihood of still being alive at that point1.\nWhilst that’s clearly morbid, using this data makes for a better personal dashboard!\n\n\n\n\nFootnotes\n\n\nTo do this, I reflect my Britishness and use the actuarial projections from the Office of National Statistics. Specifically, they provide cohort mortality for a 48 year-old British man that is living in 2020. (I use cohort mortality so as to reflect projected mortality improvements, but didn’t over-egg it to include health or postcode details.)↩︎"
  }
]